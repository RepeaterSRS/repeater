name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      db:
        image: postgres:17
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: repeater
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install UV
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: uv sync
        working-directory: ./backend
      
      - name: Run backend formatting check
        run: |
          uvx ruff check --select I .
          uvx ruff format --check .
        working-directory: ./backend
      
      - name: Run tests
        run: uv run pytest
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/repeater
          SECRET_KEY: abc123
          FRONTEND_URL: .
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        working-directory: ./backend

  frontend-check:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: web/package.json

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./web

      - name: Copy OpenAPI spec
        run: |
          mkdir -p web/docs
          cp docs/openapi.yaml web/docs/openapi.yaml

      - name: Generate frontend client
        run: pnpm run openapi-ts
        working-directory: ./web
      
      - name: Run frontend formatting check
        run: |
          pnpm run lint
          pnpm exec prettier --check .
        working-directory: ./web


  build-and-push:
    needs:
      - backend-test
      - frontend-check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          target: production
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image for test
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          target: production
          build-args: |
            API_URL=test-url-goes-here
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:test
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:main-test
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image for production
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          target: production
          build-args: |
            API_URL=prod-url-goes-here
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image tags
        run: |
          echo "Backend image tags:"
          echo "${{ steps.backend-meta.outputs.tags }}"
          echo "Frontend test image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:test"
          echo "Frontend prod image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:prod"
