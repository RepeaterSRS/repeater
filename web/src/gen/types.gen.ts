// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_import_deck_decks_import_post
 */
export type BodyImportDeckDecksImportPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * CardCreate
 */
export type CardCreate = {
    /**
     * Deck Id
     */
    deck_id: string;
    /**
     * Content
     */
    content: string;
};

/**
 * CardOut
 */
export type CardOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Deck Id
     */
    deck_id: string;
    /**
     * Deck Name
     */
    deck_name: string;
    /**
     * Content
     */
    content: string;
    /**
     * Next Review Date
     */
    next_review_date: string;
    /**
     * Overdue
     */
    overdue: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * CardUpdate
 */
export type CardUpdate = {
    /**
     * Deck Id
     */
    deck_id?: string | null;
    /**
     * Content
     */
    content?: string | null;
};

/**
 * CategoryCreate
 */
export type CategoryCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
};

/**
 * CategoryNode
 */
export type CategoryNode = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Decks
     */
    decks?: Array<DeckSummary>;
    /**
     * Children
     */
    children?: Array<CategoryNode>;
    /**
     * Deck Count
     */
    deck_count?: number;
    /**
     * Depth
     */
    depth?: number;
};

/**
 * CategoryOut
 */
export type CategoryOut = {
    /**
     * Id
     */
    id: string;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
    /**
     * Is Root
     */
    is_root: boolean;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * CategoryTree
 */
export type CategoryTree = {
    /**
     * Categories
     */
    categories?: Array<CategoryNode>;
    /**
     * Uncategorized Decks
     */
    uncategorized_decks?: Array<DeckSummary>;
    /**
     * Total Categories
     */
    total_categories?: number;
    /**
     * Total Decks
     */
    total_decks?: number;
    /**
     * Tree Depth
     */
    tree_depth?: number;
};

/**
 * CategoryUpdate
 */
export type CategoryUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Parent Id
     */
    parent_id?: string | null;
};

/**
 * DeckCreate
 */
export type DeckCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
};

/**
 * DeckOut
 */
export type DeckOut = {
    /**
     * Id
     */
    id: string;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Category Id
     */
    category_id?: string | null;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * DeckStatistics
 */
export type DeckStatistics = {
    /**
     * Deck Id
     */
    deck_id: string;
    /**
     * Deck Name
     */
    deck_name: string;
    /**
     * Retention Rate
     */
    retention_rate: number;
    /**
     * Total Reviews
     */
    total_reviews: number;
    /**
     * Last Studied
     */
    last_studied: string;
    /**
     * Difficulty Ranking
     */
    difficulty_ranking: string;
};

/**
 * DeckSummary
 */
export type DeckSummary = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
};

/**
 * DeckUpdate
 */
export type DeckUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Category Id
     */
    category_id?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ReviewCreate
 */
export type ReviewCreate = {
    /**
     * Card Id
     */
    card_id: string;
    feedback: ReviewFeedback;
};

/**
 * ReviewFeedback
 */
export type ReviewFeedback = 'ok' | 'skipped' | 'forgot';

/**
 * ReviewOut
 */
export type ReviewOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Card Id
     */
    card_id: string;
    /**
     * Deck Id
     */
    deck_id: string;
    /**
     * User Id
     */
    user_id: string;
    /**
     * Reviewed At
     */
    reviewed_at: string;
    /**
     * Card Content
     */
    card_content: string;
    /**
     * Deck Name
     */
    deck_name: string;
    feedback: ReviewFeedback;
    /**
     * Interval
     */
    interval: number;
    /**
     * Repetitions
     */
    repetitions: number;
    /**
     * Ease Factor
     */
    ease_factor: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Succeeded
     */
    succeeded: boolean;
    /**
     * Failed
     */
    failed: boolean;
};

/**
 * StatisticsOut
 */
export type StatisticsOut = {
    /**
     * Total Reviews
     */
    total_reviews: number;
    /**
     * Daily Reviews
     */
    daily_reviews: {
        [key: string]: number;
    };
    /**
     * Success Rate
     */
    success_rate: number;
    /**
     * Retention Rate
     */
    retention_rate: number;
    /**
     * Streak
     */
    streak: number;
    /**
     * Deck Statistics
     */
    deck_statistics: Array<DeckStatistics>;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserLogin
 */
export type UserLogin = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserOut
 */
export type UserOut = {
    /**
     * Id
     */
    id: string;
    /**
     * Email
     */
    email: string | null;
    /**
     * Role
     */
    role: string;
    /**
     * Auth Provider
     */
    auth_provider: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type LoginAuthLoginPostData = {
    body: UserLogin;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginAuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAuthLoginPostError = LoginAuthLoginPostErrors[keyof LoginAuthLoginPostErrors];

export type LoginAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LoginAuthLoginPostResponse = LoginAuthLoginPostResponses[keyof LoginAuthLoginPostResponses];

export type LogoutAuthLogoutPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type LogoutAuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutAuthLogoutPostResponse = LogoutAuthLogoutPostResponses[keyof LogoutAuthLogoutPostResponses];

export type RegisterAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterAuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterAuthRegisterPostError = RegisterAuthRegisterPostErrors[keyof RegisterAuthRegisterPostErrors];

export type RegisterAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: UserOut;
};

export type RegisterAuthRegisterPostResponse = RegisterAuthRegisterPostResponses[keyof RegisterAuthRegisterPostResponses];

export type RefreshTokenAuthRefreshPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshTokenAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RefreshTokenAuthRefreshPostResponse = RefreshTokenAuthRefreshPostResponses[keyof RefreshTokenAuthRefreshPostResponses];

export type GetDecksDecksGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Category Id
         */
        category_id?: string;
    };
    url: '/decks';
};

export type GetDecksDecksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDecksDecksGetError = GetDecksDecksGetErrors[keyof GetDecksDecksGetErrors];

export type GetDecksDecksGetResponses = {
    /**
     * Response Get Decks Decks Get
     * Successful Response
     */
    200: Array<DeckOut>;
};

export type GetDecksDecksGetResponse = GetDecksDecksGetResponses[keyof GetDecksDecksGetResponses];

export type CreateDeckDecksPostData = {
    body: DeckCreate;
    path?: never;
    query?: never;
    url: '/decks';
};

export type CreateDeckDecksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDeckDecksPostError = CreateDeckDecksPostErrors[keyof CreateDeckDecksPostErrors];

export type CreateDeckDecksPostResponses = {
    /**
     * Successful Response
     */
    201: DeckOut;
};

export type CreateDeckDecksPostResponse = CreateDeckDecksPostResponses[keyof CreateDeckDecksPostResponses];

export type DeleteDeckDecksDeckIdDeleteData = {
    body?: never;
    path: {
        /**
         * Deck Id
         */
        deck_id: string;
    };
    query?: never;
    url: '/decks/{deck_id}';
};

export type DeleteDeckDecksDeckIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteDeckDecksDeckIdDeleteError = DeleteDeckDecksDeckIdDeleteErrors[keyof DeleteDeckDecksDeckIdDeleteErrors];

export type DeleteDeckDecksDeckIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateDeckDecksDeckIdPatchData = {
    body: DeckUpdate;
    path: {
        /**
         * Deck Id
         */
        deck_id: string;
    };
    query?: never;
    url: '/decks/{deck_id}';
};

export type UpdateDeckDecksDeckIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDeckDecksDeckIdPatchError = UpdateDeckDecksDeckIdPatchErrors[keyof UpdateDeckDecksDeckIdPatchErrors];

export type UpdateDeckDecksDeckIdPatchResponses = {
    /**
     * Successful Response
     */
    200: DeckOut;
};

export type UpdateDeckDecksDeckIdPatchResponse = UpdateDeckDecksDeckIdPatchResponses[keyof UpdateDeckDecksDeckIdPatchResponses];

export type ImportDeckDecksImportPostData = {
    body: BodyImportDeckDecksImportPost;
    path?: never;
    query?: {
        /**
         * Format
         */
        format?: string;
    };
    url: '/decks/import';
};

export type ImportDeckDecksImportPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImportDeckDecksImportPostError = ImportDeckDecksImportPostErrors[keyof ImportDeckDecksImportPostErrors];

export type ImportDeckDecksImportPostResponses = {
    /**
     * Successful Response
     */
    201: unknown;
};

export type ExportDeckDecksDeckIdExportGetData = {
    body?: never;
    path: {
        /**
         * Deck Id
         */
        deck_id: string;
    };
    query?: never;
    url: '/decks/{deck_id}/export';
};

export type ExportDeckDecksDeckIdExportGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExportDeckDecksDeckIdExportGetError = ExportDeckDecksDeckIdExportGetErrors[keyof ExportDeckDecksDeckIdExportGetErrors];

export type ExportDeckDecksDeckIdExportGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCardsCardsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Deck Id
         */
        deck_id?: string;
        /**
         * Only Due
         */
        only_due?: boolean;
    };
    url: '/cards';
};

export type GetCardsCardsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCardsCardsGetError = GetCardsCardsGetErrors[keyof GetCardsCardsGetErrors];

export type GetCardsCardsGetResponses = {
    /**
     * Response Get Cards Cards Get
     * Successful Response
     */
    200: Array<CardOut>;
};

export type GetCardsCardsGetResponse = GetCardsCardsGetResponses[keyof GetCardsCardsGetResponses];

export type CreateCardCardsPostData = {
    body: CardCreate;
    path?: never;
    query?: never;
    url: '/cards';
};

export type CreateCardCardsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCardCardsPostError = CreateCardCardsPostErrors[keyof CreateCardCardsPostErrors];

export type CreateCardCardsPostResponses = {
    /**
     * Successful Response
     */
    201: CardOut;
};

export type CreateCardCardsPostResponse = CreateCardCardsPostResponses[keyof CreateCardCardsPostResponses];

export type DeleteCardCardsCardIdDeleteData = {
    body?: never;
    path: {
        /**
         * Card Id
         */
        card_id: string;
    };
    query?: never;
    url: '/cards/{card_id}';
};

export type DeleteCardCardsCardIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCardCardsCardIdDeleteError = DeleteCardCardsCardIdDeleteErrors[keyof DeleteCardCardsCardIdDeleteErrors];

export type DeleteCardCardsCardIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateCardCardsCardIdPatchData = {
    body: CardUpdate;
    path: {
        /**
         * Card Id
         */
        card_id: string;
    };
    query?: never;
    url: '/cards/{card_id}';
};

export type UpdateCardCardsCardIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCardCardsCardIdPatchError = UpdateCardCardsCardIdPatchErrors[keyof UpdateCardCardsCardIdPatchErrors];

export type UpdateCardCardsCardIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CardOut;
};

export type UpdateCardCardsCardIdPatchResponse = UpdateCardCardsCardIdPatchResponses[keyof UpdateCardCardsCardIdPatchResponses];

export type LoginOauthLoginGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oauth/login';
};

export type LoginOauthLoginGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AuthOauthAuthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oauth/auth';
};

export type GetUserInfoMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type GetUserInfoMeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserInfoMeGetError = GetUserInfoMeGetErrors[keyof GetUserInfoMeGetErrors];

export type GetUserInfoMeGetResponses = {
    /**
     * Successful Response
     */
    200: UserOut;
};

export type GetUserInfoMeGetResponse = GetUserInfoMeGetResponses[keyof GetUserInfoMeGetResponses];

export type CreateReviewReviewsPostData = {
    body: ReviewCreate;
    path?: never;
    query?: never;
    url: '/reviews';
};

export type CreateReviewReviewsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateReviewReviewsPostError = CreateReviewReviewsPostErrors[keyof CreateReviewReviewsPostErrors];

export type CreateReviewReviewsPostResponses = {
    /**
     * Successful Response
     */
    201: ReviewOut;
};

export type CreateReviewReviewsPostResponse = CreateReviewReviewsPostResponses[keyof CreateReviewReviewsPostResponses];

export type GetReviewHistoryReviewsCardIdGetData = {
    body?: never;
    path: {
        /**
         * Card Id
         */
        card_id: string;
    };
    query?: never;
    url: '/reviews/{card_id}';
};

export type GetReviewHistoryReviewsCardIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetReviewHistoryReviewsCardIdGetError = GetReviewHistoryReviewsCardIdGetErrors[keyof GetReviewHistoryReviewsCardIdGetErrors];

export type GetReviewHistoryReviewsCardIdGetResponses = {
    /**
     * Response Get Review History Reviews  Card Id  Get
     * Successful Response
     */
    200: Array<ReviewOut>;
};

export type GetReviewHistoryReviewsCardIdGetResponse = GetReviewHistoryReviewsCardIdGetResponses[keyof GetReviewHistoryReviewsCardIdGetResponses];

export type GetUserStatisticsStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/stats';
};

export type GetUserStatisticsStatsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserStatisticsStatsGetError = GetUserStatisticsStatsGetErrors[keyof GetUserStatisticsStatsGetErrors];

export type GetUserStatisticsStatsGetResponses = {
    /**
     * Successful Response
     */
    200: StatisticsOut;
};

export type GetUserStatisticsStatsGetResponse = GetUserStatisticsStatsGetResponses[keyof GetUserStatisticsStatsGetResponses];

export type GetCategoriesCategoriesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories';
};

export type GetCategoriesCategoriesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesCategoriesGetError = GetCategoriesCategoriesGetErrors[keyof GetCategoriesCategoriesGetErrors];

export type GetCategoriesCategoriesGetResponses = {
    /**
     * Response Get Categories Categories Get
     * Successful Response
     */
    200: Array<CategoryOut>;
};

export type GetCategoriesCategoriesGetResponse = GetCategoriesCategoriesGetResponses[keyof GetCategoriesCategoriesGetResponses];

export type CreateCategoryCategoriesPostData = {
    body: CategoryCreate;
    path?: never;
    query?: never;
    url: '/categories';
};

export type CreateCategoryCategoriesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCategoryCategoriesPostError = CreateCategoryCategoriesPostErrors[keyof CreateCategoryCategoriesPostErrors];

export type CreateCategoryCategoriesPostResponses = {
    /**
     * Successful Response
     */
    201: CategoryOut;
};

export type CreateCategoryCategoriesPostResponse = CreateCategoryCategoriesPostResponses[keyof CreateCategoryCategoriesPostResponses];

export type GetCategoriesTreeCategoriesTreeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/categories/tree';
};

export type GetCategoriesTreeCategoriesTreeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCategoriesTreeCategoriesTreeGetError = GetCategoriesTreeCategoriesTreeGetErrors[keyof GetCategoriesTreeCategoriesTreeGetErrors];

export type GetCategoriesTreeCategoriesTreeGetResponses = {
    /**
     * Successful Response
     */
    200: CategoryTree;
};

export type GetCategoriesTreeCategoriesTreeGetResponse = GetCategoriesTreeCategoriesTreeGetResponses[keyof GetCategoriesTreeCategoriesTreeGetResponses];

export type DeleteCategoryCategoriesCategoryIdDeleteData = {
    body?: never;
    path: {
        /**
         * Category Id
         */
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type DeleteCategoryCategoriesCategoryIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCategoryCategoriesCategoryIdDeleteError = DeleteCategoryCategoriesCategoryIdDeleteErrors[keyof DeleteCategoryCategoriesCategoryIdDeleteErrors];

export type DeleteCategoryCategoriesCategoryIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateCategoryCategoriesCategoryIdPatchData = {
    body: CategoryUpdate;
    path: {
        /**
         * Category Id
         */
        category_id: string;
    };
    query?: never;
    url: '/categories/{category_id}';
};

export type UpdateCategoryCategoriesCategoryIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCategoryCategoriesCategoryIdPatchError = UpdateCategoryCategoriesCategoryIdPatchErrors[keyof UpdateCategoryCategoriesCategoryIdPatchErrors];

export type UpdateCategoryCategoriesCategoryIdPatchResponses = {
    /**
     * Successful Response
     */
    200: CategoryOut;
};

export type UpdateCategoryCategoriesCategoryIdPatchResponse = UpdateCategoryCategoriesCategoryIdPatchResponses[keyof UpdateCategoryCategoriesCategoryIdPatchResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};