// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { LoginAuthLoginPostData, LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, LogoutAuthLogoutPostData, LogoutAuthLogoutPostResponses, RegisterAuthRegisterPostData, RegisterAuthRegisterPostResponses, RegisterAuthRegisterPostErrors, RefreshTokenAuthRefreshPostData, RefreshTokenAuthRefreshPostResponses, GetDecksDecksGetData, GetDecksDecksGetResponses, GetDecksDecksGetErrors, CreateDeckDecksPostData, CreateDeckDecksPostResponses, CreateDeckDecksPostErrors, DeleteDeckDecksDeckIdDeleteData, DeleteDeckDecksDeckIdDeleteResponses, DeleteDeckDecksDeckIdDeleteErrors, UpdateDeckDecksDeckIdPatchData, UpdateDeckDecksDeckIdPatchResponses, UpdateDeckDecksDeckIdPatchErrors, ImportDeckDecksImportPostData, ImportDeckDecksImportPostResponses, ImportDeckDecksImportPostErrors, ExportDeckDecksDeckIdExportGetData, ExportDeckDecksDeckIdExportGetResponses, ExportDeckDecksDeckIdExportGetErrors, GetCardsCardsGetData, GetCardsCardsGetResponses, GetCardsCardsGetErrors, CreateCardCardsPostData, CreateCardCardsPostResponses, CreateCardCardsPostErrors, DeleteCardCardsCardIdDeleteData, DeleteCardCardsCardIdDeleteResponses, DeleteCardCardsCardIdDeleteErrors, UpdateCardCardsCardIdPatchData, UpdateCardCardsCardIdPatchResponses, UpdateCardCardsCardIdPatchErrors, LoginOauthLoginGetData, LoginOauthLoginGetResponses, AuthOauthAuthGetData, GetUserInfoMeGetData, GetUserInfoMeGetResponses, GetUserInfoMeGetErrors, CreateReviewReviewsPostData, CreateReviewReviewsPostResponses, CreateReviewReviewsPostErrors, GetReviewHistoryReviewsCardIdGetData, GetReviewHistoryReviewsCardIdGetResponses, GetReviewHistoryReviewsCardIdGetErrors, GetUserStatisticsStatsGetData, GetUserStatisticsStatsGetResponses, GetUserStatisticsStatsGetErrors, GetCategoriesCategoriesGetData, GetCategoriesCategoriesGetResponses, GetCategoriesCategoriesGetErrors, CreateCategoryCategoriesPostData, CreateCategoryCategoriesPostResponses, CreateCategoryCategoriesPostErrors, GetCategoriesTreeCategoriesTreeGetData, GetCategoriesTreeCategoriesTreeGetResponses, GetCategoriesTreeCategoriesTreeGetErrors, DeleteCategoryCategoriesCategoryIdDeleteData, DeleteCategoryCategoriesCategoryIdDeleteResponses, DeleteCategoryCategoriesCategoryIdDeleteErrors, UpdateCategoryCategoriesCategoryIdPatchData, UpdateCategoryCategoriesCategoryIdPatchResponses, UpdateCategoryCategoriesCategoryIdPatchErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 */
export const logoutAuthLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutAuthLogoutPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutAuthLogoutPostResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Register
 */
export const registerAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterAuthRegisterPostResponses, RegisterAuthRegisterPostErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh Token
 */
export const refreshTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenAuthRefreshPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RefreshTokenAuthRefreshPostResponses, unknown, ThrowOnError>({
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Get Decks
 */
export const getDecksDecksGet = <ThrowOnError extends boolean = false>(options?: Options<GetDecksDecksGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDecksDecksGetResponses, GetDecksDecksGetErrors, ThrowOnError>({
        url: '/decks',
        ...options
    });
};

/**
 * Create Deck
 */
export const createDeckDecksPost = <ThrowOnError extends boolean = false>(options: Options<CreateDeckDecksPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDeckDecksPostResponses, CreateDeckDecksPostErrors, ThrowOnError>({
        url: '/decks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Deck
 */
export const deleteDeckDecksDeckIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDeckDecksDeckIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDeckDecksDeckIdDeleteResponses, DeleteDeckDecksDeckIdDeleteErrors, ThrowOnError>({
        url: '/decks/{deck_id}',
        ...options
    });
};

/**
 * Update Deck
 */
export const updateDeckDecksDeckIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateDeckDecksDeckIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateDeckDecksDeckIdPatchResponses, UpdateDeckDecksDeckIdPatchErrors, ThrowOnError>({
        url: '/decks/{deck_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Import Deck
 */
export const importDeckDecksImportPost = <ThrowOnError extends boolean = false>(options: Options<ImportDeckDecksImportPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportDeckDecksImportPostResponses, ImportDeckDecksImportPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/decks/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Export Deck
 */
export const exportDeckDecksDeckIdExportGet = <ThrowOnError extends boolean = false>(options: Options<ExportDeckDecksDeckIdExportGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportDeckDecksDeckIdExportGetResponses, ExportDeckDecksDeckIdExportGetErrors, ThrowOnError>({
        url: '/decks/{deck_id}/export',
        ...options
    });
};

/**
 * Get Cards
 */
export const getCardsCardsGet = <ThrowOnError extends boolean = false>(options?: Options<GetCardsCardsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCardsCardsGetResponses, GetCardsCardsGetErrors, ThrowOnError>({
        url: '/cards',
        ...options
    });
};

/**
 * Create Card
 */
export const createCardCardsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCardCardsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCardCardsPostResponses, CreateCardCardsPostErrors, ThrowOnError>({
        url: '/cards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Card
 */
export const deleteCardCardsCardIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCardCardsCardIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCardCardsCardIdDeleteResponses, DeleteCardCardsCardIdDeleteErrors, ThrowOnError>({
        url: '/cards/{card_id}',
        ...options
    });
};

/**
 * Update Card
 */
export const updateCardCardsCardIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCardCardsCardIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCardCardsCardIdPatchResponses, UpdateCardCardsCardIdPatchErrors, ThrowOnError>({
        url: '/cards/{card_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const loginOauthLoginGet = <ThrowOnError extends boolean = false>(options?: Options<LoginOauthLoginGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoginOauthLoginGetResponses, unknown, ThrowOnError>({
        url: '/oauth/login',
        ...options
    });
};

/**
 * Auth
 */
export const authOauthAuthGet = <ThrowOnError extends boolean = false>(options?: Options<AuthOauthAuthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/oauth/auth',
        ...options
    });
};

/**
 * Get User Info
 */
export const getUserInfoMeGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserInfoMeGetResponses, GetUserInfoMeGetErrors, ThrowOnError>({
        url: '/me',
        ...options
    });
};

/**
 * Create Review
 */
export const createReviewReviewsPost = <ThrowOnError extends boolean = false>(options: Options<CreateReviewReviewsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReviewReviewsPostResponses, CreateReviewReviewsPostErrors, ThrowOnError>({
        url: '/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Review History
 */
export const getReviewHistoryReviewsCardIdGet = <ThrowOnError extends boolean = false>(options: Options<GetReviewHistoryReviewsCardIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReviewHistoryReviewsCardIdGetResponses, GetReviewHistoryReviewsCardIdGetErrors, ThrowOnError>({
        url: '/reviews/{card_id}',
        ...options
    });
};

/**
 * Get User Statistics
 */
export const getUserStatisticsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserStatisticsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserStatisticsStatsGetResponses, GetUserStatisticsStatsGetErrors, ThrowOnError>({
        url: '/stats',
        ...options
    });
};

/**
 * Get Categories
 */
export const getCategoriesCategoriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesCategoriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesCategoriesGetResponses, GetCategoriesCategoriesGetErrors, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

/**
 * Create Category
 */
export const createCategoryCategoriesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCategoryCategoriesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCategoryCategoriesPostResponses, CreateCategoryCategoriesPostErrors, ThrowOnError>({
        url: '/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Categories Tree
 */
export const getCategoriesTreeCategoriesTreeGet = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesTreeCategoriesTreeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesTreeCategoriesTreeGetResponses, GetCategoriesTreeCategoriesTreeGetErrors, ThrowOnError>({
        url: '/categories/tree',
        ...options
    });
};

/**
 * Delete Category
 */
export const deleteCategoryCategoriesCategoryIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoryCategoriesCategoryIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCategoryCategoriesCategoryIdDeleteResponses, DeleteCategoryCategoriesCategoryIdDeleteErrors, ThrowOnError>({
        url: '/categories/{category_id}',
        ...options
    });
};

/**
 * Update Category
 */
export const updateCategoryCategoriesCategoryIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCategoryCategoriesCategoryIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateCategoryCategoriesCategoryIdPatchResponses, UpdateCategoryCategoriesCategoryIdPatchErrors, ThrowOnError>({
        url: '/categories/{category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};